#!/usr/bin/perl
#
# afinger - Auxio finger
#
# Version: 0.45.1
#
# Copyright (c) 2000-2016 Pieter Krul <pkrul@auxio.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##############################################################################

# Location of the configuration file
my $config = '/etc/afinger.conf';

##############################################################################
# The default settings below are used if the configuration file is not found.
# For more information, see afinger.conf and documentation

### Host display options

$nocgi         = 1;                    # 0 = Print HTTP Content-Type header
$minuid        = 1000;                 # UIDs below $minuid can't be fingered
$maxuid        = 60000;                # UIDs above $maxuid can't be fingered
$charcode      = 'utf8';               # Default character encoding for I/O

### Host error display options

$fortune       = 1;                    # 1 = Use the Fortune program in errors
$fortpath      = '/usr/bin/fortune';   # Location of the Fortune program
$cookie        = '';                   # Fortune file or directory to use
$cookielen     = 72;                   # Select max length fortune cookies
$errline       = 'afinger:';           # Prefix to use for error-messages

### Login display options

$nologin       = 1;                    # 0 = Display login name
$noname        = 1;                    # 0 = Display real name
$nohome        = 1;                    # 0 = Display home directory
$noshell       = 1;                    # 0 = Display shell
$nooffice      = 1;                    # 0 = Display office location
$nophone       = 1;                    # 0 = Display home phone
$noterm        = 1;                    # 0 = Display terminal information

### Host User display options (all files relative to full home directory path)

$optoutfile    = '.nofinger';          # Name of opt-out dont-finger-me file
$planfile      = '.plan';              # Name of .plan file, user plans
$projfile      = '.project';           # Name of .project file, user activity
$fwdfile       = '.forward';           # Name of .forward file, see aliases(8)
$pubfile       = '.pgpkey';            # Name of file with GPG/PGP public Key
$mailspool     = 'Maildir';            # Type of Mailspool (Maildir,/var/mail)

$noplan        = 1;                    # 0 = Show contents of $HOME/.plan
$noplanmtime   = 1;                    # 0 = Show mtime    of $HOME/.plan
$noproj        = 1;                    # 0 = Show contents of $HOME/.project
$noprojmtime   = 1;                    # 0 = Show mtime    of $HOME/.project
$noforward     = 1;                    # 0 = Show contents of $HOME/.forward
$nopub         = 1;                    # 0 = Show contents of $HOME/.gpg
$nomail        = 1;                    # 0 = Show status   of user's mailbox
  
### Service/Client network options

$nonetwork     = 1;                    # 0 = Allow outgoing network queries
$network_timeo = 2;                    # 2 = Timeout in seconds for queries
$network_recv  = 4096;                 # Maximum receive buffer for queries

### Client network options

$maxqry        = 8;                    # Max. IP   addresses to use per query
$maxqry_inet   = 8;                    # Max. IPv4 addresses to use per query
$maxqry_inet6  = 8;                    # Max. IPv6 addresses to use per query

### Extra options - See README

$whohasips     = 0;                    # 1 = Show logon IP address. Use only
                                       #     if /bin/who(1) supports '--ips'
                                       #     See afinger README

##############################################################################
#
# Perl modules, defines, and variables

use strict;
use Getopt::Long;
use File::stat;
use Time::localtime;
use File::Basename;

# Note: Socket, IO::Socket and IO::Select are used for user-initiated network
# queries in function bughost()

# need this so that the config options are in the symbol table
use vars qw(
    $charcode $cookie $cookielen $errline $fortpath $fortune $forward $fwdfile
    $mailspool $maxqry $maxqry_inet $maxqry_inet6 $maxuid $minuid $nonetwork
    $network_recv $network_timeo $nocgi $optoutfile $nohome $nologin $nomail
    $noname $nooffice $nophone $noplan $noplanmtime $noprojmtime $noproj
    $nopub $noshell $noterm $planfile $projfile $pubfile $whohasips
);

# For consistent output dates, we use LC_TIME=C in termscan()
use open IO => ":encoding($charcode) :std";
use open IO => ":locale";

# Variables for functions etc.

# Gecos variable fields
my ($gcos,$hmephone,$home,$homedir,$loc,$name,$office,$offphone,$shell,$uid);
my ($gcos_f,$hmephone_f,$home_f,$login_f,$office_f,$shell_f);

my ($forout,$login,$mailbox,$status);
my (@plandata,@projdata,@pubdata,@fwdlines,@fwddests,@fwdaddrs);

# for holding command line options
my %clo;

##############################################################################
# subroutines

sub input {
    # Reset variables for each new user on command line
    $name = $uid = $gcos = $home = $homedir = $shell = $loc = $office = '';
    $offphone = $hmephone = $home_f = $login_f = $gcos_f = '';
    $shell_f = $office_f = $hmephone_f = '';

    # filter out unwanted characters
    $login =~ s/([\&;\`'\\\|"*?~<>^\(\)\[\]\{\}\$\n\r])//g;
    if ($login =~ /^\@/) {
        diehard();
    } elsif ($login =~ /\@/) {
        bughost($login) if ($nonetwork == 0) or diehard();
    } else {
        passwdscan($login);
    }
}

sub passwdscan {
    ($name,$uid,$gcos,$home,$shell) = (getpwnam($login))[0,2,6,7,8];
    diehard() if (!$uid or $uid < $minuid or $uid > $maxuid);
    if (!$shell) { $shell = '/bin/sh'; }
    if ($gcos) {
        ($gcos,$loc,$offphone,$hmephone) = split (/\,/, $gcos);
        if ($loc and $offphone) {
            $office = "$loc\, $offphone";
        } elsif ($loc) {
            $office = $loc;
        } elsif ($offphone) {
            $office = $offphone;
        }
    } else {
        $gcos = '(null)';
    }
    output($login,$uid,$name,$gcos,$office,$hmephone,$home,$shell);
}

sub mailscan {
    my ($maildir,$mailcur) = '';

    if ($mailspool =~ /^Maildir$/) {
        $maildir = (getpwnam($login))[7].'/Maildir';
        $mailcur = $maildir.'/cur';
        $mailbox = $maildir.'/new';
    } else {
        $maildir = 0;
        $mailbox = $mailspool.'/'. $login;
    }

    if (stat($mailbox) and -r $mailbox) {
        my ($mailsize,$newmail,$lastmail);
        $mailsize = stat($mailbox)->size;

        if ($maildir ne 0) {
            # Maildir++
            $newmail  = ctime(stat($mailbox)->mtime);
            if (stat($mailcur)) {
                $lastmail = ctime(stat($mailcur)->atime);
            } else {
                $mailsize = 0;
            }
        } else {
            # Mail spool file
            $newmail  = ctime(stat($mailbox)->mtime);
            $lastmail = ctime(stat($mailbox)->atime);
        }

        # Some mailreaders leave an empty file after retrieving
        if ($mailsize eq 0) {
            print "\nNo mail.\n";
            return;
        }
        if ($newmail eq $lastmail) {
            print "\nMail last read on ", $lastmail, "\n";
        } else {
            print "\nNew mail received ", $newmail, "\n";
            print "     Unread since ", $lastmail, "\n";
        }

    } else { 
        print "\nNo mail.\n";
    }
}

sub termscan {
    my ($whocmd,$where,$wmonth,$wday,$wtime,$from);

    # GNU coreutils changed meaning of -l from --lookup to --login per
    # POSIX.  Also, 'who', by default, shows the canonical host name thus
    # resolved, which is weird, since clients can have numerous addresses
    # on it's host name. For instance google.com has seven (7) addresses,
    # six IPv4 and one IPv6. Which address connected us? Debian and
    # it's derivatives patched 'who', adding an '--ips' option.
    
    if ($^O eq 'linux' ) {
        if ($whohasips ne 0) {
            $whocmd = 'LC_TIME=C who -s --ips';
        } else {
            $whocmd = 'LC_TIME=C who -s';
        }
    } elsif ($^O eq 'hpux' ) {
        $whocmd = 'who -R';
    } else {
        $whocmd = 'who';
    }

    print "\n";
    foreach $_ (`$whocmd`) {
        if (/^$login/) {
            chomp;
            ($where,$wmonth,$wday,$wtime,$from) = 
                (split)[1,2,3,4,5];
            print "On since $wmonth $wday $wtime on $where";
            if ($from) {
                $from =~ s/\(|\)//g;
                print " from ", $from;
            }
            print "\n";
        }
    }
    print "\n";
}

sub output {
    if (-e "$home/$optoutfile") {
        $status = "User not responding." unless ($fortune);
        diehard($status);
    } else {
        format LOGIN =
Login: ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~Name: ^<<<<<<<<<<<<<<<<<<<<<<<<<
$login_f, $gcos_f
Directory: ^<<<<<<<<<<<<<<<<<<<<<<<<<<~Shell: ^<<<<<<<<<<<<<<<<<<<<<<<<
$home_f, $shell_f
Office: ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Home Phone:~^<<<<<<<<<<<<<<<<<<<
$office_f, $hmephone_f
.

        $~ = "LOGIN";
        $login_f = $login unless $nologin;
        $gcos_f = $gcos unless $noname;
        $home_f = $home unless $nohome;
        $shell_f = $shell unless $noshell;
        $office_f = $office unless $nooffice;
        $hmephone_f = $hmephone unless $nophone;
        write;

        if (!$noterm) {
            termscan($login);
        }

        if ($forward and -r "$home/$fwdfile") {
            open(FWD,'<', "$home/$fwdfile") or die($!);
            while (my $fwdfh = <FWD>) {
                push (@fwdlines, $fwdfh);
            }
            close(FWD);
 
            foreach my $fwline (@fwdlines) {
                chomp ($fwline);
                if ($fwline =~ /#/) {
                    next;
                } elsif ($fwline =~ /,/) {
                    push (@fwddests, split(/,/, $fwline));
                    next;
                } else {
                    push (@fwddests, $fwline);
                    next;
                }
            }
 
            foreach my $fwddest (@fwddests) {
                $fwddest =~ s/\s//g;
                if (index($fwddest,'@') != -1) {
                    push (@fwdaddrs, "$fwddest");
                } elsif ($fwddest =~ /\|/) {
                    push (@fwdaddrs, "pipe:command");
                } else {
                    push (@fwdaddrs, "$fwddest");
                }
            }
 
            my $fwdout  = join(', ', @fwdaddrs);

            format FORWARD =
Mail forwarded to ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$fwdout
.

            $~ = "FORWARD";
            write;
        }

        if (!$nomail) {
            mailscan($login);
        }

        if (-r "$home/$pubfile") {
            if (!$nopub) {
                open(PUB,'<', "$home/$pubfile") or diehard();
                print "\nPublic Key:\n";
                while (<PUB>) { 
                    print $_;
                }
                close(PUB);
            }
        }

        if (-r "$home/$projfile") {
            if (!$noproj) {
                print "Project:\n";
                if (!$noprojmtime) {
                    print "    Last updated: ",
                        ctime(stat("$home/$projfile")->mtime), "\n\n";
                } else {
                    print "\n";
                }
                open(PRJ,'<', "$home/$projfile") or diehard();
                chomp (my $projout = <PRJ>);
                close(PRJ);
                print $projout."\n";
            }
        }

        if (-r "$home/$planfile") {
            if (!$noplan) {
                print "\nPlan:\n";
                if (!$noplanmtime) {
                    print "    Last updated: ",
                        ctime(stat("$home/$planfile")->mtime), "\n\n";
                } else {
                    print "\n";
                }
                open(PLN,'<', "$home/$planfile") or diehard();
                while (<PLN>) { 
                    print $_;
                }
                close(PLN);
            }
        } else { 
            print "No Plan.\n"; 
        }           
        exit (0);
    }
}

sub bughost {
    use Socket qw(:addrinfo SOL_SOCKET SO_RCVBUF SOCK_STREAM);
    use IO::Socket;
    use IO::Select;

    my ($user, $remotehost) = split(/\@/, $_[0]);

    my $port  = getservbyname('finger', 'tcp');

    # AI_ADDRCONFIG - Query for IPv4 addresses only when an IPv4 address is
    # present, and for IPv6 addresses only when an IPv6 address is present.
    my %sockopts = ( 
        socktype => SOCK_STREAM, 
        flags    => AI_ADDRCONFIG
    );

    my ($aierr,@addrinfo) = getaddrinfo($remotehost, $port, \%sockopts);
    if ($aierr) {
        $status = "$remotehost: $aierr"; 
        diehard($status);
    }

    my ($sock,$remoteerr,$remoteaddr,$remoteport,$reply);
    my ($ais,$ais4,$ais6) = 0;

    # Loop through all addresses resolved from $remotehost and try to connect;
    # The first address that accepts will be queried.
    foreach my $ainfo (@addrinfo) {
        my $ainr = @addrinfo;
        $ais4++ if ($ainfo->{family} == 2);
        $ais6++ if ($ainfo->{family} == 10);
        if ($ais >= $maxqry) {
            $status = "Max. addresses to try ($maxqry) reached.";
            diehard($status);
            last;
        } elsif ($ais4 >= $maxqry_inet) {
            $status = "Max. tries for IPv4 addresses ($maxqry_inet) reached.";
            diehard($status);
            last;
        } elsif ($ais6 >= $maxqry_inet6) {
            $status = "Max. tries for IPv6 addresses ($maxqry_inet6) reached.";
            diehard($status);
            last;
        }
        $ais++;

        my $aihost = IO::Socket->new();
        $aihost->timeout($network_timeo);
        $aihost->socket($ainfo->{family}, $ainfo->{socktype},
            $ainfo->{protocol}) or next;
        $aihost->connect($ainfo->{addr}) or next;
        ($remoteerr, $remoteaddr, $remoteport) = getnameinfo($ainfo->{addr},
            NI_NUMERICHOST|NI_NUMERICSERV);
        $sock = $aihost;
        last;
    }
    unless ($sock) {
        my $nraddr = $ais;
        if ($ais eq 1) {
            $status = "Could not connect to $remotehost ($remoteaddr)";
        } else {
            $status = "Could not connect to any of the $ais IP-addresses of ".
               "$remotehost";
        }
        diehard($status);
    }
    $sock->setsockopt(SOL_SOCKET, SO_RCVBUF, $network_recv) or
        ($status = "Setting network options failed: $!", diehard($status));

    print "[ $remotehost ($remoteaddr) ]\n";
    $sock->send("$user\r\n", 0);

    my $waitbuf = IO::Select->new();
    $waitbuf->add($sock);
    # Allow three recv buffers of config->$network_recv size
    for my $rxc (1..3) {
        if ($waitbuf->can_read($network_timeo)) {
            defined $sock->recv($reply, $network_recv)or 
                ($status = "Unable to receive data at chunk $rxc: $!",
                    diehard($status));
            print $reply;
            next;
        } else {
            $status = "Time-out while receiving data: $!";
            diehard($status);
            last;
        }
    }
    close ($sock);
    exit 0;
}

sub diehard {
    if ($fortune) {
        my $fortopts = '';
        if ($cookielen < 80) {
            $fortopts = '-s -n '.$cookielen;
        } else {
            $fortopts = '-n '.$cookielen;
        }
        if (-f $cookie) {
            my $forcmd = "$fortpath $fortopts $cookie";
            $forout = (`$forcmd`);
            $forout =~ "s/\s+/ /g";
            chomp ($forout);
            print $errline, ' ', $forout, ".\n";
            exit(1);
        } else {
            $status = 'No such user.' unless ($status);
            print $errline, ' ', $status, "\n";
            exit(1);
        }
    } else {
        $status = 'No such user.' unless ($status);
        print $errline, ' ', $status, "\n";
        exit(1);
    }
}

sub load_conf {
    # name of config file. if not found, use our internal defaults
    my $config_file = shift || $config;

    # all possible options below
    my @options = qw(
        charcode cgi cookie cookielen errline fortpath fortune forward fwdfile
        home login mail mailspool maxqry maxqry_inet maxqry_inet6 maxuid
        minuid name network network_recv network_timeo optoutfile office
        phone plan planfile planmtime proj projfile projmtime pub pubfile
        shell term
    );

    # options that need to have 'no' prepended and negated
    my @no_options = qw(
        cgi home login mail name network office phone plan planmtime proj
        projmtime pub shell term
    );

    # options that are not bool
    my @non_bool_options = qw(
        charcode cookie cookielen errline fortpath fwdfile homedir mailspool
        maxqry maxqry_inet maxqry_inet6 maxuid minuid network_recv
        network_timeo optoutfile planfile projfile pubfile
    );

    my ($options_re, $no_options_re, $non_bool_options_re);

    # build regular expressions
    $options_re = '^(' . join('|', @options) . ')$';
    $no_options_re = '^(' . join('|', @no_options) . ')$';
    $non_bool_options_re = '^(' . join('|', @non_bool_options) . ')$';

    # turn off strict references
    no strict 'refs';

    # try to open the config file
    open(CONF, "< :encoding($charcode)", $config_file) or return;

    # variables to hold config options
    my ($key, $value);

    # read it line by line
    while (<CONF>) {
        next if /^\s*#/ or /^\s*$/;
        chomp; s/^\s+//; s/\s+$//;
        ($key, $value) = split(/\s+/, $_, 2);

        # lowercase the option name
        $key = lc $key;

        # make sure this option is valid
        if ($key !~ /$options_re/o) {
            print STDERR "afinger: invalid config option '$key' ".
                "from $config_file line $.\n";
            next;
        }

        # check to see if this option is bool
        if ($key !~ /$non_bool_options_re/o) {
            if ($value =~ /^(yes|true|1)$/oi) {
                $value = 1;
            } else {
                $value = 0;
            }
        }

        # check to see if this is a 'no' option
        if ($key =~ /$no_options_re/o) {
            $key = "no$key";
            $value = not $value;
        }

        # now that we are here, it is safe to set the
        # the value of the config option (using sym refs)
        $$key = $value;

    }

    close(CONF);
}

##############################################################################
# main

# Parsing command line options:
#
# Note that several finger daemons pass arguments to the finger client,
# for instance '--' on FreeBSD, and '-s' on Solaris. They can be filtered and
# discarded from here.
#
# Comment (#) the next line to show the argument(s) that passed if your finger
# daemon returns 'unknown user' while the user really does exist.
Getopt::Long::Configure('pass_through');

GetOptions(
    \%clo,
    # 's!',        # Discard -s option passed by Solaris in.fingerd
    # 'l!',        # Discard -l option passed by Linux Netkit in.fingerd
) or ($status = 'Bad options passed to afinger', diehard());

# parse the config file
load_conf();

print "Content-Type: text/plain\n\n" if (!$nocgi);

# check for usernames
if (@ARGV) {
    # loop over all the given usernames
    foreach my $username (@ARGV) {
        $login = $username;
        input($login);
    }
} else { 
    $status = 'Please provide a valid username.';
    diehard($status);
}

exit(0);

# end
